[
  "command 命令行 | umi 提供了很多内置的命令行用于启动，构建项目，另外还有一些辅助开发的命令，如生成器等。\n要获取可用的命令列表，你可以在项目目录中运行 help 命令：\n```bash\numi help\n```\n你应该能看到类似如下的日志：\n```bash\nUsage: umi <command> [options]\nCommands:\n    build     build app for production\n    config    umi config cli\n    dev       dev server for development\n    help      show commands help\n    lint      lint source code using eslint and stylelint\n    setup     setup project\n    deadcode  check dead code\n    version   show umi version\n    v         show umi version\n    plugin    inspect umi plugins\n    verify-commit verify the commit message, which is usually used with husky.\n    preview   locally preview production build\n    run       run the script commands, support for ts and zx\n    generate  generate code snippets quickly\n    g         generate code snippets quickly\nRun `umi help <command>` for more information of specific commands.\nVisit https://umijs.org/ to learn more about Umi.\n```\n> 为方便查找,以下命令通过字母排序.\n",
  "command build | 构建项目，适用于生产环境的部署。\n```bash\n$ umi build\n```\n",
  "command config | 通过命令行快速查看和修改配置。\n查看配置，可以用 `list` 或 `get`。\n```bash\n$ umi config list\n - [key: polyfill] false\n - [key: externals] { esbuild: true }\n$ umi config get mfsu\n - [key: externals] { esbuild: true }\n```\n修改配置，可以用 `set` 或 `remove`。\n```bash\n$ umi config set polyfill false\nset config:polyfill on /private/tmp/sorrycc-wsYpty/.umirc.ts\n$ umi config remove polyfill\nremove config:polyfill on /private/tmp/sorrycc-wsYpty/.umirc.ts\n```\n",
  "command dev | 启动本地开发服务器，进行项目的开发与调试。\n```bash\n$ umi dev\n        ╔═════════════════════════════════════════════════════╗\n        ║ App listening at:                                   ║\n        ║  >   Local: https://127.0.0.1:8001                  ║\nready - ║  > Network: https://192.168.1.1:8001                ║\n        ║                                                     ║\n        ║ Now you can open browser with the above addresses👆 ║\n        ╚═════════════════════════════════════════════════════╝\nevent - compiled successfully in 1051 ms (416 modules)\n```\n",
  "command generate | 用于增量生成文件或启用功能，命令行别名是 `g`。\n不加任何参数时会给交互式的生成器选择。\n```bash\n$ umi g\n# 或\n$ umi generate\n? Pick generator type › - Use arrow-keys.Return to submit.\n❯   Create Pages -- Create a umi page by page name\n    Enable Prettier -- Enable Prettier\n```\n也可以指定参数。\n```bash\n# 生成路由文件\n$ umi g page index --typescript --less\n```\n",
  "command help | 查看帮助。\n```bash\n$ umi help\nUsage: umi <command> [options]\nCommands:\n    build     build app for production\n    config    umi config cli\n    dev       dev server for development\n    help      show commands help\n    setup     setup project\n    version   show umi version\n    plugin    inspect umi plugins\n    generate  generate code snippets quickly\nRun `umi help <command>` for more information of specific commands.\nVisit https://umijs.org/ to learn more about Umi.\n```\n也可指定命令，查看特定命令的详细帮助。\n```bash\n$ umi help build\nUsage: umi build [options]\nbuild app for production.\nDetails:\n    umi build\n    # build without compression\n    COMPRESS=none umi build\n    # clean and build\n    umi build --clean\n```\n",
  "command lint | 用于检查及修正代码是否符合规则。\n```bash\n$ umi lint\nUsage: umi lint\n 支持只校验 js|ts|tsx|jsx 类型文件: umi lint --eslint-only\n 支持只校验 css|less 等样式文件: umi lint --stylelint-only\n 支持校验 cssinjs 模式校验: umi lint --stylelint-only --cssinjs\n 修正代码: --fix\n```\n",
  "command plugin | 插件相关操作，目前只支持 `list` 子命令。\n列出所有插件。\n```bash\n$ umi plugin list\n- @umijs/core/dist/service/servicePlugin\n- @umijs/preset-umi (from preset)\n- @umijs/preset-umi/dist/registerMethods (from preset)\n- @umijs/preset-umi/dist/features/appData/appData (from preset)\n- @umijs/preset-umi/dist/features/check/check (from preset)\n- @umijs/preset-umi/dist/features/configPlugins/configPlugins (from preset)\n- virtual: config-styles\n- virtual: config-scripts\n- virtual: config-routes\n- virtual: config-plugins\n...\n```\n",
  "command preview | `umi preview` 命令会在本地启动一个静态 Web 服务器，将 dist 文件夹运行在 http://127.0.0.1:4172, 用于预览构建后产物, 支持 proxy、mock 等设置。\n你可以通过 `--port` 参数来配置服务的运行端口。\n```bash\n$ umi preview --port 9527\n```\n现在 `preview` 命令会将服务器运行在 http://127.0.0.1:9527.\n通过 `--host` 参数来指定 配置服务运行的 hostname。\n以下用户配置在 `preview` 时也会生效\n* [https](./config#https)\n* [proxy](../guides/proxy)\n* [mock](../guides/mock)\n注意 `dist` 目录会随着配置 `outputPath` 的变更而变更。\n",
  "command run | `umi run` 命令可以让你像 node 运行 js 一样来运行 TypeScript 和 ESM 文件。你可以搭配 zx 来更好的使用脚本命令。\n```bash\n$ umi run ./script.ts\n```\n",
  "command setup | 初始化项目，会做临时文件的生成等操作。通常在 package.json 的 `scripts.postinstall` 里设置。\n```bash\n{\n  \"scripts\": { \"postinstall\": \"umi setup\" }\n}\n```\n",
  "command deadcode | 用于查找 src 目录下未被引用的文件，并在根目录输出文件。\n```bash\n$ umi deadcode\n- Preparing...\n- begin check deadCode\n- write file /examples/umi-run/DeadCodeList-{timeStamp}.txt\n- check dead code end, please be careful if you want to remove them\n```\n",
  "command mfsu | `umi mfsu` 命令可以查看 MFSU 依赖信息、重新构建 MFSU 依赖和清除 MFSU 依赖。\n\n```bash title=\"获取 MFSU 命令帮忙\"\n$ umi mfsu\n```\n```bash title=\"获取 MFSU 依赖列表\"\n$ umi mfsu ls\nwarning@4.0.3\nregenerator-runtime/runtime.js@0.13.11\nreact/jsx-dev-runtime@18.1.0\nreact-intl@3.12.1\nreact-error-overlay/lib/index.js@6.0.9\nreact@18.1.0\nqiankun@2.8.4\nlodash/noop@4.17.21\nlodash/mergeWith@4.17.21\nlodash/concat@4.17.21\n...\n```\n```bash title=\"重新构建 MFSU 依赖\"\n$ umi mfsu build\ninfo  - Preparing...\ninfo  - MFSU eager strategy enabled\nwarn  - Invalidate webpack cache since mfsu cache is missing\ninfo  - [MFSU] buildDeps since cacheDependency has changed\n...\ninfo  - [plugin: @umijs/preset-umi/dist/commands/mfsu/mfsu] [MFSU][eager] build success\n```\n```bash title=\"清除 MFSU 依赖\"\n$ # 删除依赖信息列表\n$ umi mfsu remove\n$ # 删除依赖信息列表和产物文件\n$ umi mfsu remove --all\n```\n",
  "command verifyCommit | 验证 commit message 信息，通常和 husky 搭配使用。\n比如在 `.husky/commit-msg` 做如下配置，\n```bash\n#!/bin/sh\n.\"$(dirname \"$0\")/_/husky.sh\"\nnpx --no-install umi verify-commit $1\n```\n",
  "command version | 查看 `umi` 版本，等同于 `umi -v`。\n```bash\n$ umi version\n4.0.0\n```\n"
]
